import App from '../components/App.jsx';

// ws refers to websocket object
// app refers to app component
const afterConnect = (ws, app) => {
  const getMessages = JSON.stringify({ method: 'GETMESSAGES' });
  // TODO: find a better solution other than settimeout
  // gets the messages and uses set timeout to wait for connection
  // to be connected before calling get messages
  setTimeout(() => (sendMessage(getMessages)), 1000);
  ws.onmessage = (event) => {
    let serverResp = JSON.parse(event.data);

    if (serverResp.code === 400) {
      console.log(serverResp.method);
      throw serverResp.message;
    }

    switch (serverResp.method) {
      case 'GETMESSAGES':
        // render all messages
        app.setState({ messages: serverResp.data });
        console.log(app.state.messages);
        break;
      case 'NEWMESSAGE':
        // concat new message onto messages array in state
        app.setState({ messages: [...this.state.messages, serverResp.data] });
        console.log(app.state.messages);
        break;
      case 'GETUSERS':
        app.setState({ users: serverResp.data });
        console.log(app.state.messages);
        break;
      case 'POSTMESSAGE':
        ws.send(getMessages);
        break;
      default:
    }
  };
};

// takes in server ip or wss protocall to connect to server
// takes in app to have scope in function
const connect = (server, app) => {
  // create new socket server instance
  const socket = new WebSocket(server);
  // on connection run the callback
  socket.addEventListener('open', () => {
    // send a confirmation to server
    sendMessage(socket, JSON.stringify('Connnected to Server Socket!'));
    // sets state to current socket session for App methods to have access
    app.setState({ ws: socket });
    // calls after connect function that takes in the socket session
    // and app component
    afterConnect(socket, app);
  });
};

// takes in a parameter and sends that parameter to the socket server
const sendMessage = (ws, data) => {
  ws.send(data);
};

export {
  connect,
  sendMessage,
  afterConnect,
};
